
// Evaluate king safety
function evaluateKingSafety(board) {
  var opponent = board.turn() === 'w' ? 'b' : 'w';
  var kingSquare = board.king(board.turn());
  var totalAttackers = 0;

  // Count the number of attacking pieces around the king
  var attacks = board.attacks(kingSquare);
  attacks.forEach(function(attack) {
    var piece = board.get(attack);
    if (piece && piece.color === opponent) {
      totalAttackers++;
    }
  });

  // Evaluate the pawn structure around the king
  var pawnStructure = board.getBoard();
  var kingFile = kingSquare.charCodeAt(0) - 'a'.charCodeAt(0);
  var kingRank = 8 - parseInt(kingSquare.charAt(1));
  var pawnCount = 0;
  for (var i = kingRank - 1; i <= kingRank + 1; i++) {
    for (var j = kingFile - 1; j <= kingFile + 1; j++) {
      if (i >= 0 && i <= 7 && j >= 0 && j <= 7) {
        var square = String.fromCharCode(j + 'a'.charCodeAt(0)) + (8 - i);
        var piece = board.get(square);
        if (piece && piece.color === board.turn() && piece.type === 'p') {
          pawnCount++;
        }
        if (piece && piece.color === opponent && piece.type === 'p') {
          pawnCount--;
        }
      }
    }
  }
  var pawnScore = pawnCount * 10;

  // Combine the scores for each factor to get a total king safety score
  var kingSafetyScore = (10 * totalAttackers) + pawnScore;

  return kingSafetyScore;
}

//











// Evaluate pawn structure
function evaluatePawnStructure(board) {
    var score = 0;
    var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
  
    // Loop through each file on the board
    for (var i = 0; i < files.length; i++) {
      var file = files[i];
      var whitePawns = 0;
      var blackPawns = 0;
      var whiteDoubledPawns = 0;
      var blackDoubledPawns = 0;
      var whiteIsolatedPawns = 0;
      var blackIsolatedPawns = 0;
  
      // Loop through each rank on the file
      for (var j = 1; j <= 8; j++) {
        var square = file + j;
        var piece = board.get(square);
  
        if (piece && piece.type === 'p') {
          if (piece.color === 'w') {
            whitePawns++;
  
            // Check for doubled pawns
            if (whitePawns > 1) {
              whiteDoubledPawns++;
            }
  
            // Check for isolated pawns
            var leftSquare = String.fromCharCode(file.charCodeAt(0) - 1) + j;
            var rightSquare = String.fromCharCode(file.charCodeAt(0) + 1) + j;
            var leftPiece = board.get(leftSquare);
            var rightPiece = board.get(rightSquare);
            if ((!leftPiece || leftPiece.color !== 'w') && (!rightPiece || rightPiece.color !== 'w')) {
              whiteIsolatedPawns++;
            }
          } else {
            blackPawns++;
  
            // Check for doubled pawns
            if (blackPawns > 1) {
              blackDoubledPawns++;
            }
  
            // Check for isolated pawns
            var leftSquare = String.fromCharCode(file.charCodeAt(0) - 1) + j;
            var rightSquare = String.fromCharCode(file.charCodeAt(0) + 1) + j;
            var leftPiece = board.get(leftSquare);
            var rightPiece = board.get(rightSquare);
            if ((!leftPiece || leftPiece.color !== 'b') && (!rightPiece || rightPiece.color !== 'b')) {
              blackIsolatedPawns++;
            }
          }
        }
      }
  
      // Add the scores for each factor to the total score
      score -= whiteDoubledPawns * 10;
      score += blackDoubledPawns * 10;
      score -= whiteIsolatedPawns * 20;
      score += blackIsolatedPawns * 20;
    }
  
    return score;
  }
  